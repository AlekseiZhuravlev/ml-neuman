model:
  #
#  nerf_model:
#    class_path: nerf_models.nerf_small_no_warp.NeuralRadianceField

  nerf_model:
#    class_path: nerf_models.nerf_small_no_warp.NeuralRadianceFieldNoDir
#    class_path: nerf_models.nerf_small_no_warp.NeuralRadianceField
    class_path: nerf_models.nerf_small_no_warp.NeuralRadianceFieldPoseCond
    init_args:
      n_harmonic_functions: 60

  offset_module:
    class_path: offset.offset_module.OffsetModule
    init_args:
      offset_net:
        class_path: nerf_models.nerf_small_no_warp.OffsetNetworkNoDir
        init_args:
          input_dim: 4
      offset_scale: 0.3
      offset_delay: 0

  loss_func_color:
    class_path: losses.huber.HuberLoss

  sil_loss_world:
    class_path: losses.sil_loss_world.SilhouetteLossWorld
    init_args:
      loss_func:
        class_path: losses.huber.HuberLoss
      sil_loss_start_factor: 1
      sil_loss_epochs: 99999

  sil_loss_can:
    class_path: losses.sil_loss_world.SilhouetteLossWorld
    init_args:
      loss_func:
        class_path: losses.huber.HuberLoss
      sil_loss_start_factor: 1
      sil_loss_epochs: -1

  renderer_warp:
    class_path: renderers.renderer_warp.RendererWarp
    init_args:
      use_offset_net: False
      pose_conditioning: True

  enable_offset_net: ${model.renderer_warp.init_args.use_offset_net}

  warp_class:
    class_path: warping.warp_uv.WarpUV
#    class_path: warping.warp_points.WarpCanonical


data:
#  data_path: /home/azhuavlev/Desktop/Data/InterHand_Neuman/03
#  data_path: /home/azhuavlev/Desktop/Data/InterHand_Neuman/07_cam5_im12
#  data_path: /home/azhuavlev/Desktop/Data/InterHand_Neuman/07_noOccl_cam60_im1_fist
#  data_path: /home/azhuavlev/Desktop/Data/InterHand_Neuman/08_noOccl_cam60_im3/
#  data_path: /home/azhuavlev/Desktop/Data/InterHand_Neuman/09_noOccl_cam30_im3/
#  data_path: /home/azhuavlev/Desktop/Data/InterHand_Neuman/10_images50_cameras15_every5---ROM03_LT_No_Occlusion
  data_path: /itet-stor/azhuavlev/net_scratch/Projects/Data/InterHand_Neuman/10_zeroPose/
  bg_rm_dilation: -1
  use_grabcut: True


trainer:
  max_epochs: 5001
  default_root_dir: /home/azhuavlev/Desktop/Results/neuman_custom/
  check_val_every_n_epoch: 250
  log_every_n_steps: 20
  logger:
    class_path: lightning.pytorch.loggers.TensorBoardLogger
    init_args:
      save_dir: ${trainer.default_root_dir}
#      version: testUVwarp_noDir_07_noOccl_cam60_im1_fist
      version: testPoseCondit_10_zeroPose
#      version: testOffsetNet_small_colorLoss_dynamic_delay0_lr5e-5

  strategy:
    class_path: lightning.pytorch.strategies.DDPStrategy
    init_args:
      find_unused_parameters: True

# Later:
# todo: use warp from paper, and other possible code
# todo: test livehand on my datasets
# todo: ask about color calibration parameters g, b
# todo: add pose conditioning

# Ask:
#


# Later:
# todo: how to warp directions?
# todo: penalize pts with large distances from mesh





# create 3 datasets
# 1 with fist, 60 cameras
# 2 with 3 poses, 60 cameras each
# 3 with 15 poses, 30 cameras each
# 4 one pose, 60 cameras

# test canonical warp on 3 datasets
# test uv warp with directions on 3 datasets
# test uv warp w/o directions on 3 datasets

# check how Ts are created in SMPL, can we manually create more? code is too difficult to understand
# run uv warp with sil loss
# check closest point finding with cpu alternative - still needs debugging
# make assert for closest point finding

# Today:
# add metrics, PSNR, LPIPS(x1000), FID
# sampling over a patch
# lpips

# add viewing directions

# segment images using grabcut
# for datasets, handle black frames

# batch mask generation

# val run:
# create val dataset with some train and some val cameras, mark which ones are val
# eval metrics, log at epoch end

# change n of harmonic functions
# train on full sequences (longer datasets)



# Experiments
# repeat on static pose, add one challenging pose - not fist
# repeat on 3 poses, 30 cameras each
# repeat on 10 poses, 30 cameras each



# Later:
# implement kaolin loss for canonical warping - it will supervise offset net
# barycentric interpolation for T matrices
# run canonical warp with bary interp, all losses


